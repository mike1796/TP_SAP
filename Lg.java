/* Generated By:JavaCC: Do not edit this line. Lg.java */
    import java.io.*;


public class Lg implements LgConstants {

    static boolean assertEncountered = false;
    static BufferedWriter outdot;

    public static void main(String args[]) throws ParseException {
        if (args.length != 1)
            System.err.println("Usage : java Lg <prog.ff>");
        else {
            try {
                // Create output file 
                FileWriter fstream = new FileWriter(args[0]+".dot");
                outdot = new BufferedWriter(fstream);

                // parse input 
                Lg parser =
                    new Lg(new java.io.FileInputStream(args[0])) ;
                parser.Input();

                outdot.close();
            }
            catch (java.io.FileNotFoundException ef) {
                System.err.println(args[0] + "not found, aborting");
            }
            catch (java.io.IOException eio) {
                System.err.println(args[0] + "io error, aborting");
            }
        }
    }

/* ===================================================
 */
  static final public void Input() throws ParseException {
                ProgNode m;
    m = main();
    jj_consume_token(0);
            System.out.println(m);
            try {
                m.analyse();
                System.out.println(m.getDecls());
            }
            catch (AnalyseException ea) {
                System.out.println(ea.getMessage());
                System.out.println("aborting");
                {if (true) return;}
            }

            m.execute();

            // The control graph 
            // ControlGraph g = m.buildControlGraph();
            // System.out.println(g);
            // System.out.println(g.toDotFile());

            // // Abstract interpretation 
            // g.computeAbstractSigns(m.getDecls());
            // try {
            //     Lg.outdot.write(g.toDotFile());
            // }
            // catch (java.io.IOException io) {
            //     System.err.println("IO error");
            // }

            // System.out.println("assert may be violated: " 
            //                + g.errorIsReachable());

  }

/* ===================================================
 */
  static final public ProgNode main() throws ParseException {
    DeclsNode d;
    InstsNode i;
    Token t;
    Token n;
    t = jj_consume_token(PROG);
    n = jj_consume_token(IDF);
    d = Decls();
    jj_consume_token(BEGIN);
    i = Insts();
    jj_consume_token(END);
          {if (true) return new ProgNode(t, n, new BlocNode(t, d, i));}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public DeclsNode Decls() throws ParseException {
    Token t = new Token();
    DeclNode d;
    java.util.List<DeclNode>  decls = new java.util.LinkedList<DeclNode>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDF:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      d = Decl();
                decls.add(d);
      t = jj_consume_token(PV);
    }
          {if (true) return new DeclsNode(t, decls);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public InstsNode Insts() throws ParseException {
    Token t = new Token();
    InstNode ii;
    java.util.List<InstNode>  insts =  new java.util.LinkedList<InstNode>();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case READ:
      case WRITE:
      case NULL:
      case ASSERT:
      case IDF:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      ii = Inst();
      t = jj_consume_token(PV);
                        insts.add(ii);
    }
          {if (true) return new InstsNode(t, insts);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public DeclNode Decl() throws ParseException {
    Token t;
    TypeNode ty;
    java.util.List<Idf> li;
    li = LidfNV();
    t = jj_consume_token(DP);
    ty = Type();
          {if (true) return new DeclNode(t, li, ty);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public java.util.List<Idf> LidfNV() throws ParseException {
    Token t;
    java.util.List<Idf> li;
    t = jj_consume_token(IDF);
              li = new java.util.LinkedList<Idf>(); li.add(new Idf(t));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRG);
      t = jj_consume_token(IDF);
                      li.add(new Idf(t));
    }
          {if (true) return  li;}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public TypeNode Type() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
               {if (true) return new TypeNode(t);}
      break;
    case BOOL:
      t = jj_consume_token(BOOL);
               {if (true) return new TypeNode(t);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public InstNode Inst() throws ParseException {
    Token t = new Token();
    AffNode af;
    CondNode cd;
    WhileNode wi;
    ReadNode re;
    WriteNode wr;
    AssertNode as;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      t = jj_consume_token(NULL);
                     {if (true) return new NullNode(t);}
      break;
    case IDF:
      af = InstAff();
                     {if (true) return af;}
      break;
    case IF:
      cd = InstCond();
                     {if (true) return cd;}
      break;
    case WHILE:
      wi = InstWhile();
                     {if (true) return wi;}
      break;
    case READ:
      re = InstRead();
                     {if (true) return re;}
      break;
    case WRITE:
      wr = InstWrite();
                     {if (true) return wr;}
      break;
    case ASSERT:
      as = Assert();
              if (!Lg.assertEncountered) {
                  Lg.assertEncountered = true;
                  {if (true) return as;}
              } else {
                  {if (true) throw new UnsupportedOperationException
                                ("multiple assertion not implemened");}
              }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public AssertNode Assert() throws ParseException {
    Token t;
    ExprNode e;
    t = jj_consume_token(ASSERT);
    e = Expr();
          {if (true) return new AssertNode(t, e);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public ReadNode InstRead() throws ParseException {
    Token t, ii;
    t = jj_consume_token(READ);
    ii = jj_consume_token(IDF);
          {if (true) return new ReadNode(t, ii);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public WriteNode InstWrite() throws ParseException {
    Token t;
    ExprNode e;
    t = jj_consume_token(WRITE);
    e = Expr();
          {if (true) return new WriteNode(t, e);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public AffNode InstAff() throws ParseException {
    Token t;
    Token idf;
    ExprNode e;
    Token p, x;
    idf = jj_consume_token(IDF);
    t = jj_consume_token(AFFECT);
    e = Expr();
                                    {if (true) return new AffNode(t, idf, e);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public CondNode InstCond() throws ParseException {
    Token t;
    ExprNode c;
    InstsNode th, el = null;
    t = jj_consume_token(IF);
    c = Expr();
    jj_consume_token(THEN);
    th = Insts();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      el = Insts();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
          {if (true) return new CondNode(t, c, th, el);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public WhileNode InstWhile() throws ParseException {
    Token t; InstsNode body;    ExprNode c;
    t = jj_consume_token(WHILE);
    c = Expr();
    jj_consume_token(LOOP);
    body = Insts();
    jj_consume_token(ENDLOOP);
          {if (true) return new WhileNode(t, c, body);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public ExprNode Expr() throws ParseException {
    Token t = null;
    ExprNode s1, s2 = null;
    s1 = SimpleExpr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUP:
    case INF:
    case EGAL:
      t = Relation();
      s2 = SimpleExpr();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
          if (s2 == null)
                {if (true) return s1;}
            else
                {if (true) return new ExprNode(t, s1, s2);}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public ExprNode SimpleExpr() throws ParseException {
    Token t ;
    ExprNode t1, t2 = null;
    t1 = Terme();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MOINS:
      case OR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      t = AddOp();
      t2 = Terme();
                                         t1 = new ExprNode(t, t1, t2);
    }
          {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public ExprNode Terme() throws ParseException {
    Token t;
    ExprNode f1, f2;
    f1 = Factor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case AND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      t = MulOp();
      f2 = Factor();
                                         f1 = new ExprNode(t, f1, f2);
    }
          {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public ExprNode Factor() throws ParseException {
    Token t;
    ExprNode u;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDF:
      t = jj_consume_token(IDF);
                 {if (true) return new ExprNode(t, new Idf(t));}
      break;
    case INTPOS:
      t = jj_consume_token(INTPOS);
                 {if (true) return new ExprNode(t, Integer.parseInt(t.image));}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                 {if (true) return new ExprNode(t, true);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                 {if (true) return new ExprNode(t, false);}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      u = Expr();
      jj_consume_token(RPAR);
                             {if (true) return u;}
      break;
    case NOT:
      t = jj_consume_token(NOT);
      u = Factor();
                         {if (true) return new ExprNode(t, u);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public Token AddOp() throws ParseException {
    Token t ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
                {if (true) return  t;}
      break;
    case MOINS:
      t = jj_consume_token(MOINS);
                {if (true) return  t;}
      break;
    case OR:
      t = jj_consume_token(OR);
                {if (true) return t;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public Token MulOp() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      t = jj_consume_token(MULT);
               {if (true) return t;}
      break;
    case DIV:
      t = jj_consume_token(DIV);
               {if (true) return  t;}
      break;
    case AND:
      t = jj_consume_token(AND);
               {if (true) return  t;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* ===================================================
 */
  static final public Token Relation() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EGAL:
      t = jj_consume_token(EGAL);
               {if (true) return t;}
      break;
    case INF:
      t = jj_consume_token(INF);
               {if (true) return t ;}
      break;
    case SUP:
      t = jj_consume_token(SUP);
               {if (true) return t;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LgTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x8109c400,0x20000000,0x300000,0x8109c400,0x1000,0x0,0x0,0x0,0x82c00000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x4a,0x34,0x81,0x4a,0x34,0x700,};
   }

  /** Constructor with InputStream. */
  public Lg(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lg(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LgTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lg(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LgTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lg(LgTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LgTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
