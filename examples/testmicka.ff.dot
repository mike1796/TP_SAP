digraph g {
"before_assign z := 0 | 1 null"->"before_assign a := 0 | 3 null"[label="z := 0"]

"before_assign a := 0 | 3 null"->"before_assign x := 10 | 5 null"[label="a := 0"]

"before_assign x := 10 | 5 null"->"before_assign y := 15 | 7 null"[label="x := 10"]

"before_assign y := 15 | 7 null"->"while_entry (x < y) | 20 null"[label="y := 15"]

"while_entry (x < y) | 20 null"->"before_assign y := (y - x) | 10 null"[label="(x < y)"]
"while_entry (x < y) | 20 null"->"while_exit (x < y) | 21 null"[label="!(x < y)"]

"before_assign y := (y - x) | 10 null"->"if_entry (x > a) | 15 null"[label="y := (y - x)"]

"if_entry (x > a) | 15 null"->"before_assign y := (y - x) | 13 null"[label="(x > a)"]
"if_entry (x > a) | 15 null"->"before_asert assert(z > a) | 17 null"[label="!(x > a)"]

"before_assign y := (y - x) | 13 null"->"after_assign y := (y - x) | 14 null"[label="y := (y - x)"]

"after_assign y := (y - x) | 14 null"->"before_asert assert(z > a) | 17 null"[label="true"]

"before_asert assert(z > a) | 17 null"->"after_assert assert(z > a) | 18 null"[label="(z > a)"]
"before_asert assert(z > a) | 17 null"->"assert_error assert(z > a) | 19 null"[label="!(z > a)"]


"after_assert assert(z > a) | 18 null"->"while_entry (x < y) | 20 null"[label="true"]



}
